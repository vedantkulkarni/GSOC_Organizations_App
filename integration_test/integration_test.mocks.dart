// Mocks generated by Mockito 5.3.0 from annotations
// in gsoc_organizations/test/integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i6;
import 'package:gsoc_organizations/Features/Home/data/models/gsoc_organization.dart'
    as _i5;
import 'package:gsoc_organizations/Features/Home/data/repositories/gsoc_repository_data_layer.dart'
    as _i3;
import 'package:gsoc_organizations/Features/Home/presentation/cubit/home_cubit.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomeState_0 extends _i1.SmartFake implements _i2.HomeState {
  _FakeHomeState_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GSOCRepositoryDataLayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockGSOCRepositoryDataLayer extends _i1.Mock
    implements _i3.GSOCRepositoryDataLayer {
  MockGSOCRepositoryDataLayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.GsocOrganization>> getAllOrganizations() =>
      (super.noSuchMethod(Invocation.method(#getAllOrganizations, []),
              returnValue: _i4.Future<List<_i5.GsocOrganization>>.value(
                  <_i5.GsocOrganization>[]))
          as _i4.Future<List<_i5.GsocOrganization>>);
  @override
  _i4.Future<List<_i5.GsocOrganization>> parseJsonResponseToObject(
          List<dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#parseJsonResponseToObject, [data]),
              returnValue: _i4.Future<List<_i5.GsocOrganization>>.value(
                  <_i5.GsocOrganization>[]))
          as _i4.Future<List<_i5.GsocOrganization>>);
}

/// A class which mocks [HomeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeCubit extends _i1.Mock implements _i2.HomeCubit {
  MockHomeCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.GsocOrganization> get organizationsList =>
      (super.noSuchMethod(Invocation.getter(#organizationsList),
          returnValue: <_i5.GsocOrganization>[]) as List<_i5.GsocOrganization>);
  @override
  _i2.HomeState get state => (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeHomeState_0(this, Invocation.getter(#state)))
      as _i2.HomeState);
  @override
  _i4.Stream<_i2.HomeState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i4.Stream<_i2.HomeState>.empty())
          as _i4.Stream<_i2.HomeState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i4.Future<void> getAllOrganizations() => (super.noSuchMethod(
      Invocation.method(#getAllOrganizations, []),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> getOrganizationsByYear() => (super.noSuchMethod(
      Invocation.method(#getOrganizationsByYear, []),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  void closeSearch() => super.noSuchMethod(Invocation.method(#closeSearch, []),
      returnValueForMissingStub: null);
  @override
  void userSearched(String? value) =>
      super.noSuchMethod(Invocation.method(#userSearched, [value]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.HomeState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i6.Change<_i2.HomeState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
}
